#! Code Conventions !:
- Файлы, в которых больше, чем 2000 строк являются громоздкими и их следует избегать.
---
- Все файлы исходного кода должны начинаться с комментариев в стиле языка С, где перечислены программист(ы), дата, уведомление об авторских правах, а также краткое описание целей программы. Например:
/*
*Имя класса
*Сведения о версии
*Уведомление об авторских правах
*/
---
- package -> import -> Объявление классов (В необходимых частях кода устанавливаются комментарии)
-> Переменные (поля) класса 
(статические) | 
		Сначала открытые (public), 
		затем защищенные (protected) и, наконец, 
		закрытые члены класса (private).
-> Переменные (поля) экземпляра |
		Сначала public, 
		затем protected, 
		после private.
-> Конструкторы ->
-> Методы | 
		сгруппированы по функциональности, а не по области действия или доступности.
---
- В качестве единицы отступа используется 4 пробела. Точное построение отступов (пробелы или табуляция) не определено. Табуляция должна быть установлена как 8 пробелов (не 4).
-  80 < Длина строк < 120 символов
---
## 4 Отступы
- Если выражение не умещается в одну строку, разбейте его, руководствуясь следующими основными принципами:
* Перенос после запятой
* Перенос перед оператором
* Предпочитаются переносы на более высоком уровне переносам на низком (более вложенном) уровне.
* Выравнивайте новую строку выражения так, чтобы его начало было на том же уровне как и в предыдущей строке.
* Если приведенные выше правила приводят к сбивающему с толку коду или коду, который жмется к полям справа, просто сделайте вместо этого отступ в 8 пробелов.
---
## 5 Комментарии
- два вида комментариев: 
	комментарий кода /*...*/  для описания кода или алгоритма(для разработчиков),
	документирующий комментарий /**...*/ спецификация кода (для пользователей)
	http://java.sun.com/products/jdk/javadoc/
	
- не нужно делать излишних комментариев
- много комментариев => плохой код !
- Комментарии не должны содержать специальных символов !
- 4 вида комментариев кода: 
							*) блочные(Перед ним нужно оставлять пустую строку), 
							*) однострочные(Перед ним нужно оставлять пустую строку), 
							*) прицепные (на той же строке, что и описываемый код), 
							*) комментарии до конца строки (не следует использовать для многострочных комментариев).
							
- /* Такой блок не будет переформатирован средствами автоформатирования
- Используйте XXX в комментарии для того, чтобы показать, что этот код неправильный, но работает. - Используйте FIXME для того, чтобы показать, что код неправильный и не работает.
## 6 Объявления
- одно объявление на строку !
- int level, size; = неправильное объявление
- один пробел между типом и идентификатором
- объявления только в начале блока !
- Избегайте локальных объявлений, перекрывающих объявления более высокого уровня
## 6.3 Инициализация
- bинициаизация переменных максимально близко к месту использования
- Нет пробелов между именем метода и скобкой "("
- "{" в конце той же строки, где объявление
- "}" на отдельной строке с тем же отступом
- Методы разделяются одной пустой строкой
## 7 Операторы
- Каждая строка должна содержать не более одного выражения
- Не используйте запятую для группировки нескольких операторов
- Составные операторы - "{операторы}"
- Вложенные операторы отступ на один уровень больше, чем составной оператор
- "{" - в конце той строки, с которой начинается составной оператор
- Скобки используются во всех операторах, даже в одиночных !
- return, не должен использовать скобки, если только это не сделает возвращаемое значение более понятным
## 8 Пробелы
- Две пустые строки всегда должны использоваться в следующих случаях:

* Между секциями в файле исходного кода

* Между определениями класса и интерфейса

Одна пустая строка всегда должна использоваться в следующих случаях:

* Между методами

* Между локальными переменными метода и его первым оператором

* Перед блочным (см. секцию 5.1.1) или однострочным (см. секцию 5.1.2) комментарием

* Между логическими участками кода внутри метода для улучшения читабельности
### 8.2 Расстановка пробелов
- Разделяющие пробелы должны ставиться при следующих обстоятельствах:
	*) Ключевое слово и следующие за ним скобки должны быть разделены пробелом.
	*) Разделяющий пробел должен появляться после запятой в списке аргументов.
	*) Все бинарные операции, исключая . должны быть отделены от их операндов пробелами. Разделяющие пробелы никогда не отделяют унарные операторы, такие как унарный минус, инкремент ("++") и декремент ("--") от их операндов.
	*) Выражения в операторе for должны быть разделены пробелами. 	
## 9 Соглашение об именовании
### Классы 
Имя класса должно быть существительным, набранным в смешанном регистре с первым символом каждого слова в верхнем регистре. Старайтесь сохранить имя вашего класса простым и наглядным. Используйте целые слова - избегайте сокращений и аббревиатур (не считая аббревиатур, использующихся чаще своих длинных форм, таких как URL и HTML).
### Интерфейсы 
Имена интерфейсов должны быть в верхнем регистре, так же, как и имена классов
### Методы 
Методы должны быть глаголами, набранными в смешанном регистре с первым символом в нижнем регистре для первого, с первым символом в верхнем регистре для остальных слов.
### Переменные 
- Исключая случаев названия переменных, все экземпляры классов и констант классов набираются в смешанном регистре с первым символом в нижнем регистре. Последующие слова набираются с большой буквы
- Имена переменных должны быть короткими, но осмысленными. Выбранное название переменной должно быть запоминающееся - то есть предназначено для краткого выражения своего содержимого для человека, временно использующего её. Односимвольные названия переменных следует избегать, исключая временных "одноразовых" переменных. i, j, k, m и n - это общеупотребительные имена для временных целочисленных переменных; c, d и e - для символьных.
### Константы
Названия переменных, объявленные константами класса, и ANSI константы должны быть набраны заглавными буквами с разделенными знаком подчеркивания "_" словами
## 10 Приёмы программирования
### 10.1 Доступ к переменным класса и экземпляра
- Не делайте переменную класса или экземпляра public без значительной причины
### 10.2 Обращение к переменным и методам класса
- Избегайте использование объекта для доступа к статическим полям и методам класса. Вместо этого используйте имя класса
### 10.3 Константы
Числовые константы (литералы) не должны быть закодированы непосредственно, исключая -1, 0, 1, которые могут использоваться в циклах для управления счетчиком
### 10.4 Присваивание значений переменным
Избегайте присваивания значения нескольким переменным в одном выражении
### 10.5.1 Скобки
хорошей практикой является свободное, избыточное использование скобок в выражениях, содержащих различные операторы, для избежания проблем с приоритетами операций
# 11. Примеры кода

11.1 Пример файла исходного кода на Java

Следующий пример показывает как форматировать исходный код файла на Java, содержащего отдельный класс. Интерфейсы форматируются отдельно. Для более подробного изучения обратитесь к разделам "Объявление классов и интерфейсов" на странице 4 и "Документирующие комментарии" на странице 9

/*

* %W% %E% Firstname Lastname

*

* Copyright (c) 1993-1996 Sun Microsystems, Inc. All Rights Reserved.

*

* This software is the confidential and proprietary information of Sun

* Microsystems, Inc. ("Confidential Information"). You shall not

* disclose such Confidential Information and shall use it only in

* accordance with the terms of the license agreement you entered into

* with Sun.

*

 * SUN НЕ ДАЁТ НИКАКИХ ГАРАНТИЙ, ЯВНЫХ ИЛИ КОСВЕННЫХ (ВКЛЮЧАЯ - НО НЕ
 

 * ОГРАНИЧИВАЯСЬ ИМИ - ГАРАНТИИ РЕАЛИЗУЕМОСТИ), СООТВЕТСТВИЯ ОПРЕДЕЛЁННОМУ
 

* НАЗНАЧЕНИЮ ИЛИ НЕНАРУШЕНИЯ УСЛОВИЙ, ЧТО СОДЕРЖИМОЕ ДАННОЙ СПЕЦИФИКАЦИИ
 

 * ПОДХОДИТ ДЛЯ КАКИХ-ЛИБО ЦЕЛЕЙ ИЛИ ЧТО ЛЮБОЕ ИСПОЛЬЗОВАНИЕ ИЛИ РЕАЛИЗАЦИЯ
 

 * ТАКОГО СОДЕРЖИМОГО НЕ БУДЕТ НАРУШАТЬ КАКИХ-ЛИБО ПАТЕНТОВ ТРЕТЬЕЙ СТОРОНЫ,
 

 * АВТОРСКИХ ПРАВ, КОММЕРЧЕСКОЙ ТАЙНЫ ИЛИ ИНЫХ ПРАВ.

*/

package java.blah;

import java.blah.blahdy.BlahBlah;

/**

* Здесь идет описание класса.

*

* @version 1.10 04 Oct 1996

* @author Firstname Lastname

*/

public class Blah extends SomeClass {

/* Комментарий расширяемого класса может быть здесь */

/** Комментарий, документирующий classVar1 */

public static int classVar1;

/**

* Документирующий комментарий к classVar2, который бывает

* больше чем одна строка

*/

private static Object classVar2;

/** комментарий, документирующий поле instanceVar1 */

public Object instanceVar1;

/** комментарий, документирующий поле instanceVar2 */

protected int instanceVar2;

/** комментарий, документирующий поле instanceVar3 */

private Object[] instanceVar3;

/**

* ...комментарий, документирующий метод Blah

*/

public Blah() {

// ...здесь идет реализация...

}

/**

* ...комментарий, документирующий метод doSomething

*/

public void doSomething() {

// ...здесь идет реализация...

}

/**

* ...комментарий, документирующий метод doSomethingElse

* @param someParam описание

*/

public void doSomethingElse(Object someParam) {

// ...здесь идет реализация...

}

}
